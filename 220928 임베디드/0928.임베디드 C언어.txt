<C언어 함수>

1. 문자열 함수
strlen : 
strcpy : 첫 번째 인수로 전달된 배열에, 두 번째 인수로 전달된 문자열을 복사
strncpy : 세 번째 인수로 복사할 문자열의 최대 길이를 지정할 수 있습니다.
strcmp : 	strcmp(time, prev)=0  
	!strcmp(time, prev)  같은 의미 

  

sscanf
sprintf 

=====================================================

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char rank[3][10] = {0};
int rankCnt[3] = {0};

void getRank(int cnt, char* prev){
    if(cnt >= rankCnt[0]){
        rankCnt[2] = rankCnt[1];
        rankCnt[1] = rankCnt[0];
        rankCnt[0] = cnt;

        strcpy(rank[2], rank[1]);
        strcpy(rank[1], rank[0]);
        strcpy(rank[0], prev);
    }
    else if(cnt >= rankCnt[1]){
        rankCnt[2] = rankCnt[1];
        rankCnt[1] = cnt;

        strcpy(rank[2], rank[1]);
        strcpy(rank[1], prev);
    }
    else if(cnt >= rankCnt[2]){
        rankCnt[2] = cnt;

        strcpy(rank[2], prev);
    }

    return;
}

int main()
{
    FILE *fp = fopen("log.txt", "r");

    char buf[1000];

    char prev[10];
    char time[10];
    int idx = 0;
    int cnt = 1;

    while(fgets(buf, sizeof(buf), fp) != NULL){
        if(idx == 0){
            sscanf(buf + 7, "%s", prev);
            idx++;
            memset(buf, '\0', sizeof(char)*1000);
            continue;
        }
        sscanf(buf + 7, "%s", time);
        if(!strcmp(time, prev)) cnt++;
        else{
            getRank(cnt, prev);
            cnt = 1;
            strcpy(prev, time);
        }
        memset(buf, '\0', sizeof(char)*1000);
        idx++;
    }

    fclose(fp);

    FILE *file = fopen("log.txt", "r");

    char buff[1000];

    while(fgets(buff, sizeof(buff), file) != NULL){
        if(strstr(buff, rank[0]) != NULL || strstr(buff, rank[1]) != NULL || strstr(buff, rank[2]) != NULL){
            printf("%s", buff);
        }
        memset(buff, '\0', sizeof(char)*1000);
    }

    fclose(file);

    return 0;
}



=====================================================

<AM>

12 /12



//#include <stdio.h>
//#include <stdlib.h>
//
//struct Node {
//	int a;
//
//	struct {
//		int b1;
//		int b2;
//
//	}b;
//
//	int c;
//};
//
//int main()
//{
//
//	struct Node v = {
//		.a = 10,
//		.b = {
//				.b1 = 150,
//				.b2 = 250
//		},
//		.c = 30
//	};
//
//	return 0;
//}








/////////////////////////////////////

//#include <stdio.h>
//
//typedef double YANG;
//typedef float YEONGJIN;
//
//int main()
//{
//
//	YANG t =  192323232232323232;
//
//	YEONGJIN u = 123.456;
//
//	printf("%f\n", t);
//	printf("%f\n", u);
//
//	return 0 ;
//
//
//}

//========================================


//#include <stdio.h>
//
//struct ABC {
//	int a;
//	int b;
//} t1, t2;
//
//int main()
//{
//	t1.a = 10;
//	t1.b = 20;
//
//	t2.a = 30;
//	t2.b = 40;
//
//	return 0;
//}

//========================================


//#include <stdio.h>
//#include <stdint.h>
//
//typedef union _ABC_ {
//	uint32_t a;
//	// uint32_t : unsigned int
//	uint8_t b[4];
//	// uint8_t : unsigned char
//
//} ACON;
//
//int main()
//{
//	ACON data;
//
//	data.a = 0x1234ABCD;
//
//	return 0;
//}


//========================================


//
//#include <stdio.h>
//#include <stdint.h>
//
//int main()
//{
//
//uint64_t g = 0xABCD12345678CD01;
//uint8_t buf[8];
//
//for (int i =7; i>=0 ; i--)
//{
//	buf[i] = g &0xFF;
//	g >>=8;
//}
//
//for (int i=0; i<8; i++)
//{
//	printf("%02X ",buf[i]);
//}
//
//}

//========================================

//#include <stdio.h>
//#include <stdint.h>
//
//typedef union _ABC_{
//	uint64_t g;
//	uint8_t buf[8];
//} ABC;
//
//
//int main()
//{
//	ABC data;
//
//	data.g = 0xABCD12345678CD01;
//
//	for (int i=0; i<8; i++)
//	{
//		printf("%02X ",data.buf[i]);
//	}
//
//	return 0;
//
//
//}


//========================================

//#include <stdio.h>
//#include <stdlib.h>
//
//struct Node {
//	int a;
//
//	struct {
//		int b1;
//		int b2;
//
//	}b;
//
//	int c;
//};
//
//int main()
//{
//
//	struct Node v = {
//		.a = 10,
//		.b = {
//				.b1 = 150,
//				.b2 = 250
//		},
//		.c = 30
//	};
//
//	return 0;
//}

//========================================

//#include <stdio.h>
//#include <stdlib.h>
//
//struct Node {
//
//	int da;
//
//	struct{
//			int ga_a;
//			int ga_b;
//	}ga;
//
//
//	struct{
//				int dc_1;
//				int dc_2;
//	}dc;
//
//};
//
//
//
//int main()
//{
//	struct Node v ={
//			.da = 10,
//			.ga = {
//					.ga_a = 100,
//					.ga_b = 200
//			},
//			.dc = {
//					.dc_1 = 50,
//					.dc_2 = 60
//			},
//	};
//
//	return 0;
//}

//================================================

//#include <stdio.h>
//#include <stdlib.h>
//#include <stdint.h>
//
//union UNI {
//	struct {
//		uint8_t a;
//		uint8_t b;
//	}d1;
//
//	struct {
//		uint8_t c;
//		uint8_t d;
//	}d2;
//};
//
//
//int main()
//{
//
//	union UNI t = {0xAB, 0xCD};
//
//	return 0;
//}


//======================================================


#include <stdio.h>
#include <stdint.h>

union Node {
	union {
		struct {
			uint8_t da;
			uint8_t db;
		}dd;

		uint16_t dtotal;
	};

	uint16_t gv;
};

int main(){

	union Node t = { .gv=0xABCD};

	return 0;
}

==========================================================

//#include <stdio.h>
//#include <stdlib.h>
//#include <stdint.h>
//
//int main()
//{
//
//	uint8_t target[7] = {0xAB,0x12,0x13,0xFA,0xAA,0xFF,0xA0};
//
//
//	union _Data_ {
//		uint8_t receiveData[7];
//
//		struct{
//			uint8_t head;
//			uint8_t body[5];
//			uint8_t tail;
//		}msg;
//
//	}dm;
//
//	memcpy(&dm, target, 7);
//
//	printf("Head = %02X\n", dm.msg.head);
//	printf("Body = ");
//	for (int i = 0; i<5; i++) {
//		printf("%02X", dm.msg.body[i]);
//	}
//	printf("\n");
//	printf("Tail = %02X\n", dm.msg.tail);
//
//	return 0;
//}

//===============================================

//#include <stdio.h>
//#include <stdlib.h>
//
//struct Node {
//	char a;
//	int b;
//}c;
//
//int main()
//{
//	struct c;
//
//	printf("%d", sizeof(c));
//
//	return 0;
//}

//===============================================

//#include <stdio.h>
//#include <stdlib.h>
//
//#pragma pack(1)
//	struct Node1 {
//		char a;
//		//8비트  = 1바이트
//		int t;
//		//32비트 = 4바이트
//	};
//
//#pragma pack(4)
//	struct Node2 {
//		char a ;
//		int t;
//	};
//
//int main()
//{
//
//	printf("%d\n", sizeof(struct Node1));
//	printf("%d\n", sizeof(struct Node2));
//
//return 0;
//}

//===============================================


#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#pragma pack(1)
	struct Node {
		uint8_t a : 3;
		uint8_t b : 3;
		uint8_t c : 2;
	};

int main()
{
	struct Node kfc = {3, 6, 1} ;
	printf("%X\n", kfc.a);
	printf("%X\n", kfc.b);
	printf("%X\n", kfc.c);

	return 0;
}

1000MB = 1GB
1000KB = 1MB

==============================

d

