ctrl + ~

-------------------------------------------------------------------

임베디드 - C언어(메모리에 직접 접근 가능하기 때문에 사용)

자바(객체지향언어)는 메모리에 접근 X..  == c#

라즈베리파이

CPIO

Why 자바스크립트 ??

웹을 움직이게 만듬 ( 버튼을 클릭하면 내용이 바뀜)
사용자와 상호작용할때 필요함 (ex : 게시판 만들기)
브라우저에 종속적인 언어(자바스크립트를 키려면 브라우저에서)


HTML : (마크업 언어)
CSS : (스타일시트 언어)

프로그래밍 언어 : 함수 사용 가능 

초보자면 로그인 제작은 지양하기! (조오오올라 어렵)


<자바스크립트 활용>
Ajax : 변동된 부분만 바꿔서 시각화 (검색할 때 연관단어)
구글맵, 구글어스

ctrl a + ctrl c,  f12 우클릭 캐시비우기 및 강력 새로고침 ,ctrl +v  


console.log("hi");

alert("HI")

alt+shift+f :

-----------------------------------------------------
 
- 변수(변하는 수 x.. 내가 이걸 쓰겠다고 말하는거 - 메모리의 주소 ) 선언 - 메모리에 이름 붙여주는거 
declare

- 선언 int a  

- 배정 a= 1  
assignment


- 초기화 int a = 1
initialize
int a = 0;

------------------------------------------------------
<변수 선언>

const (초기화 유무 확인 가능, 

let

var <------------ ( deprecate : 지원은 하는데 안써야함 )

------------------------------------------------------

자바스크립트에서는 타입을 붙이지 않음( int, spring 등)

const a = 1;
console.log(a);
---------------------------------------
const a ;
console.log(a);    <-- Uncaught SyntaxError: Missing initializer in const declaration 에러 발생

------------------------------------------

-언어의 법칙
한번 선언한 변수는 다시 선언할 수 없다

근데 JS에서 var를 사용하면 가능 

var a=1;
var a=2;
console.log(a);           

----------------------------------------

a=1;
console.log(a);   <--  선언을 하지 않았는데 값이 나옴 


----------------------------------------

const a = 1;
const a = 2;    <-- Uncaught SyntaxError: Identifier 'a' has already been declared


----------------------------------------

const a = 1;
a = 2;           <--- Uncaught TypeError: Assignment to constant variable.


const는 선언한 변수를 변경할 수 x , 

constant variable (상수변수)
변경 불가능 , but 객체와 배열은 변경은 가능
 
-----------------------------------------

let <-- 값 바꾸고 싶으면 사용  
변해야하는 것 (i, count, flag)

------------------------------------------

function hello() {
  var a =5;
}
hello()
console.log(a);    <--- VM248:5 Uncaught ReferenceError: a is not defined

--------------------------------------------

{
    var a =5;
  }
  console.log(a);

5

----------------------------------------------

{
    const a =10;
  }
  console.log(a);  <-- VM308:4 Uncaught ReferenceError: a is not defined
  
블록 안에서 선언한 변수는 블록 밖에서 사용불가능

---------------------------------------------

number
string
boolean = 참/거짓
null = 의도적인 빈 값 ( 캘린더 만들 때)
undefined = 의도치 않은 빈 값 
Array 

---------------------------------------------

console.log(typeof(1));
console.log(typeof(-1)); 
console.log(typeof(-3.14));
console.log(typeof("1"));
console.log(typeof("a"));
console.log(typeof("랄랄라"));
console.log(typeof(true));
console.log(typeof("true"));

VM368:1 number
VM368:2 number
VM368:3 number
VM368:4 string
VM368:5 string
VM368:6 string
VM368:7 boolean
VM368:8 string

----------------------------------------------------------
const a = [1,2,3,4]
console.log( a[1]);

2

-------------------------------------------------------	
const a = [1,2,3]
console.log( a);

(3) [1, 2, 3]

---------------------------------------------------------

<JS에서 함수>

함수는 "기능"이다

함수 이름은 무조건 소문자로 ! (카멜 케이스로 작성)            <- 함수 선언

function sampleFuntion(){
console.log("랄랄라")
}

( )는 파라미터(갖다 쓰라고 주는 값) 


sampleFunction();                                                         <- 함수 실행
  ( )는 실행이다.


----------------------------------------------------
global 전역변수
local 지역변수 


--------------------------------------------------
function sampleFunction(a){
const b = 2;
console.log(a);
}

--------------------------------------------------

sampleFunc();
{
console.log("랄랄라")
}


-----------------------------------

function sampleFunc(a){5
  a.push(4)
  
  
  }
  
  const a = [1,2,3];
  sampleFunc(a)                                 <--------------- 이렇게 쓸바에 아래처럼 써야함 
  console.log(a);

(4) [1, 2, 3, 4]

콜 바이 레퍼런스

-----------------------------------------

const a = [1,2,3];
function sampleFunc(){5
  a.push(4)
  
  
  }
  
  sampleFunc(a)
  console.log(a);

-----------------------------------------

const a= 1;
const b= 2;
function sampleFunc(a,b){
return a+b;                                          결과값이 있으면 내보내는 역할 
}

result = sampleFunc(a,b);
console.log(result)
console.log(sampleFunc(a.b));

-------------------------------------------

<JS에는 콜백함수 존재>


-----------------------------------------

<JS에는 함수는 변수이다.(하나의 타입이다)> 
람다식(Lambda Expression) 이라고도 함

const sampleFunc = function (){
console.log("랄라");
};

sampleFunc()

랄라

-------------------------------------------

일반적인 언어에서 함수는 (재사용 가능한) 기능 

자바는 선택사항 (함수의 이름을 지정해주지 않아도 됩니다)


----------------------------------------------

176p- 3 

const run = function() {                                  이렇게 하는게 좋음 

for (let i = 0;  i<3; i++) {
     console. log("#");
}

};

run();

</script>

-----------------------------------------------

<변수의 호이스팅>
let, const가 막아줄 수 있음

-------------------------------------------------
[오후수업]

ECMAScript (시험에 나왔음)

표준은 ES6


JS에서 중요한 개념

1. function(함수)
2. object(객체)
3. array(배열)  

-------------------------------------------------


객체는
키(key)와
값(value)으로 이루어진 프로퍼티(property, 속성)의 모음 이다.



const info2 = {
  userName: "이자룡"
  job: "싸피강사",
  isMarrgied: true;
 };

------------------------------

const family = ["아빠","엄마","실비"];
const info = {
userName: "이자룡",
job: "싸피강사",
isMarrgied: true,
family : family,
mystack : {
fronted : "Vue.js",
backed : "node,js",
},
add: function(a,b) {
  return a + b;
},
};



console.log(info.add(3,4));

console.log(info.mystack.fronted);

console.log(info.userName);

console.log()






-----------------------------------------------

console.log()
콜론이라는 개체 안에 log라는 함수가 있음

객체 접근 + 배열 접근  

배열과 객체는 const로 선언되었어도 변경, 삭제가 가능하다!!

(단 const에서  배열 자체를 다시 새 배정하는 것은 불가능) 

-----------------------------------------------

JS에서 length쓸때는 괄호 안쓰기 



--------------------------------------


const a = 1;
const b = "1";
console.log(a===b);              <---  ==로 쓰면 안됨 


----------------------------------------

다르다면 !==
대수비교 !<

--------------------------------------


i는 바뀌어야 하니까 앞에 let 쓰기 (let은 반복문에서만 쓰기)


----------------------------------------

const arr = [1,2,3];

arr.push(4);
console.log(arr);

VM365:4 (4) [1, 2, 3, 4]

----------------------------------------

const arr1 = [1,2,3];
const arr2 = [1,2,3];
const result1 = arr1 + arr2;
console.log(result1);

VM395:4 1,2,31,2,3

-------------------------------------------

<HTML(문서= 거대한 객체) 에서 JS해보기>


console.log(document)

console.dir(document)

객체에 특정 프로포티 값에 접근하여 수정 --> 이것을 DOM 수정이라고 하더라~ 

---------------------------------------------------------------	

HTML에서 Console.log 찍으면 웹 f12에 위치 

script는 body 맨 끝부분 위에 위치해야 문제 x

단 <script defer src="./test.js"></script>를 사용해서 위에 적용가능하긴 해~ (권장은 안함)


------------------------------------------------------------------

태그
클래스 . 
아이디 #

document.querySelector(".lalala").textContent = "ㅎㅇ";

--------------------------------------------------------------------
// const lalalas = document.querySelector(".lalala");
// console.log(lalalas[0].textContent);
// console.log(lalalas[0].textContent);
// console.log(lalalas[0].textContent);



--------------------------------------------------------------------

const lalalas = document.querySelectorAll(".lalala");

for (let i = 0; i < lalalas.length; i++) {
  lalalas[i].textContent = "yes";
}


------------------------------------------------------------------

JS는 카멜이 디폴트

-콜백함수 -
파라미터로 들어가는 함수 그 자체 
당장 실행은 안되고 특정한 조건을 만족시켰을 때 작동 (조건을 만족시키지 않으면 작동 x)

 
이벤트(사건)의 대표적인 예제 : Click
이벤트 => 함수로 받아야함 

-------------------------------------------------------------------

createTextNode



------------

  <h1 class1="button"> 버튼1 </h1>
  <h1 class2="button"> 버튼2 </h1>
  <h1 class3="button"> 버튼3 </h1>
  <h1 class4="button"> 버튼4 </h1>
  <h1 class5="button"> 버튼5 </h1>


-----------------------------------------------------------------




