<HASH>

Dictionary 자료구조 

hash : hash로 구현되어 있는 C++ STL의 이름은 unordered_map;



//=================HASH (1)==============================
//================현업에서 배열이랑 해쉬 짱 많이 사용===
//DAT값이 엄청 큰 값이거나 음수거나 문자열이면 못쓰니까 이럴때는 HASH사용 

//#include <iostream>
////#include <map>  // <--------------BST 사용
//#include <unordered_map> // <---------- 더 많이 사용
//using namespace std;
//
//int main()
//{
//	unordered_map<int, char> um;
//
//	um[1548] = 'A';
//	um[-123] = 'E';  //딕셔너리 값이라 음수를 넣을 수 있음 
//
//	cout << um[1548];
//
//
//	return 0;
//}

//====================HASH (2)========================================

//#include <iostream>
//#include <map>  // <--------------BST 사용
//#include <unordered_map> // <---------- 더 많이 사용
//using namespace std;
//
//int main()
//{
//	int val[5] = { 3,4,2,-1,-35 };
//
//	unordered_map<int, int> um;
//
//	for (int i = 0; i < 5; i++)
//	{
//		um[val[i]] =1 ;
//		 um[int] = int;
//	}
//
//	int tar;
//	cin >> tar;
//	if (um[tar]) cout << "있음";
//	else cout << "없음";
//
//
//	return 0;
//}



//=============================================================

//um[15] = 50;
//
////30이 없으면 if에 진입 안함 <== 요렇게 써야함!!		
//if (um.count(30))
//{
//	cout << um[30];
//}
////30이 없으면 

//================================================================

<입력받은 문자와 일치하는 갯수 세기>
#include <iostream>

#include <string>

#include <map> // <---------- bst

#include <unordered_map> // <--------- hash
using namespace std;

int main() {
    unordered_map <string, int> um;
    string vat[6] = { "huhu","hot","bts","mc","hot","hot" };
    string a;
    cin >> a;
    int cnt = 0;
    for (int i = 0; i<6; i++)
    {
        um[vat[i]]++;

    }
    if(um.count(a))
    cout <<um[a] << endl;
    return 0;
}


==============================================================================

카카오문제 1. 비밀지도

1. [n을 2진수 문자열로 만드는 함수]

str = getBinary(n, len)





2. [ ]
for 5번 돌려서
9,20,28,18,11 각각 문자열로 만들고
한번 더 for 돌려서 배열에 #이나 공백을 넣은 문자열 제작 


#include <iostream>
#include <string>
#include <vector>
using namespace std;

int N;
string getBinary(int tar) {
    string ret;

    while (tar != 0) {
        ret += '0' + (tar % 2);
        tar /= 2;
    }

    //0 집어넣기
    for (int i = ret.size(); i < N; i++) {
        ret += '0';
    }

    string ret2;
    //뒤집기
    for (int i = ret.size() - 1; i >= 0; i--) {
        ret2 += ret[i];
    }

    return ret2;
}

vector<string> getMatrix(vector<int> arr) {
    vector<string> ret;

    for (int i = 0; i < N; i++) {
        string line = getBinary(arr[i]);
        ret.push_back(line);
    }

    return ret;
}

vector<string> solution(int n, vector<int> arr1, vector<int> arr2) {
    
    N = n;
    vector<string> ret1 = getMatrix(arr1);
    vector<string> ret2 = getMatrix(arr2);

    for (int y = 0; y < n; y++) {
        for (int x = 0; x < n; x++) {
            if (ret2[y][x] == '1' || ret1[y][x] == '1') {
                ret1[y][x] = '#';
            }
            else {
                ret1[y][x] = ' ';
            }
        }
    }

    return ret1;
}

int main() {

    int n = 5;
    vector<int> arr1 = { 9, 20, 28, 18, 11 };
    vector<int> arr2 = { 30, 1, 21, 17, 28 };
    
    vector<string> ret = solution(n, arr1, arr2);
    for (int y = 0; y < n; y++) {
        cout << ret[y] << '\n';
    }
    
    return 0;
}


=====================================================================

카카오 문제 2. 어피치 얼굴 
 
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
using namespace std;

int directY[4] = { -1, 1, 0, 0 };
int directX[4] = { 0, 0, 1, -1 };
struct Node { int y, x; };
queue<Node> q;
int h, w;

int bfs(vector<vector<int>> &picture, int dy, int dx) {
    while (!q.empty()) q.pop();

    int cnt = 1;
    q.push({ dy, dx });
    int tar = picture[dy][dx];
    picture[dy][dx] = 0;

    while (!q.empty()) {
        Node now = q.front();
        q.pop();
        
        for (int t = 0; t < 4; t++) {
            int ny = now.y + directY[t];
            int nx = now.x + directX[t];
            if (ny < 0 || nx < 0 || ny >= h || nx >= w) continue;
            if (picture[ny][nx] != tar) continue;
            picture[ny][nx] = 0;
            q.push({ ny, nx });
            cnt++;
        }
    }

    return cnt;
}

vector<int> solution(int m, int n, vector<vector<int>> picture) {
    h = m;
    w = n;

    int sumCnt = 0;    
    int maxi = -3423;
    
    for (int y = 0; y < h; y++) {
        for (int x = 0; x < w; x++) {
            if (picture[y][x] == 0) continue;
            int ret = bfs(picture, y, x);
            maxi = max(maxi, ret);
            sumCnt++;
        }
    }

    vector<int> answer(2);
    answer[0] = sumCnt;
    answer[1] = maxi;
    return answer;
}







