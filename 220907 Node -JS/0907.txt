<09.07>

=====AM===============================

- [시험] SSR (전통적인 렌더링방식)
html 페이지 <- 서버에서 만듬
사용자들은 빠른 속도라 사용가능(대신 서버에서 힘들어함)
화면 전환시 새로고침 발생 

- PHP??? 
조건에 맞게 페이지 생성 -> 사용자에게 완전한 HTML를 제공 

- CSR 
html 페이지 <- 클라이언트에서 만듬 (SSR보다 느림)
화면 전환시 axios를 이용해서 변화가 존재하는 부분만 변경 
모바일의 발전 -> 새로고침을 하지 않고 부드러운 화면 전환
=> Vue.js 등장

-Vue.js 
Component 기반 : 재사용이 가능한 각각의 독립된 모듈 (part 별 끼리 조립 <- 1개의 html이 아닌 각 각파일로 구분됨 )

-DOM : 태그(웹 페이지에 대한 인터페이스)

-[시험] Virtual DOM : 웹페이지 성능 향상
Virtual DOM 채택 시, Real DOM 에 직접 접근 금지
querySelector, createElement, innerHTML 등 사용 안함 (가상의 html에 접근해야하기 때문에!)

-Progressive JavaScript Framwork

- [시험] 디자인 패턴 3문제

- MVVM Pattern
세 가지 역할을 분명히 구분하여, 웹 개발을 수행
Model : 실제 데이터를 처리하는 소스코드
View : UI에 해당하는 소스코드   
ViewModel : View를 표현하기 위해 만들어진 코드 <----- Vue.js가 따르는 형식 


=======================================

우리 수업은 vue 2버전 사용

<JS>
쿼리셀렉터
에드이벤트리스너
콘솔로그 

=======================================

[시험] v- on = @

변수는 데이터 안 리턴에 들어감
함수는 메소드에 들어감

[시험] this.를 사용해야함 (데이터 안에 리턴값)

[시험] methods = 메서드를 생성할 때 사용되는 객체


=========================================

[시험 5문제!] 바인딩의 종류
- 단방향 바인딩 : 사용자가 직접 데이터를 못바꿈! 메소드를 실행시켜서 바꾼거지 
   v-bind, {{ }}
- 양방향 바인딩 : 사용자가 직접 데이터를 바꿈 (input과 깊은 관련) 데이터의 return이 바뀜 [체크박스,서브미트] 
  v-model

input을 직접적으로 받을 수 있다는 점이 장점

=====PM==================================

(시험출제) v-bind VS v-model 차이
v-bind는 실제 data가 안바뀌어 v-model을 써야 data가 바뀌는거야

(시험출제) el if는 존재하지않다(파이썬에 존재)

(시험출제) 라이프 사이클 
created() : 
mounted() : 

===================================

vue-cli : 프로젝트를 세팅 

경로에 있는 프로젝트 이름에 ( )넣지 않기 !!


=====================================

(시험출제) presets
babel : 언어 번역기
템플릿은 html이다.
스타일은 css이다.
스크립트는 J/S이다.

=======================================

<>
1. npm i 
2. npm run serve


========================================

컴포넌트(부품) 개념 진짜 중요 !

=========================================
1. 인포트
2. 등록하고
3. 붙여라 	



