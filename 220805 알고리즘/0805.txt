#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

struct Node {
	int witch;
	int cost;
};

vector<vector<Node>> alist(5); //0 ~ 4번 노드
int result[5];

bool operator<(Node v, Node t) {
	return t.cost < v.cost;
}
priority_queue<Node> q;

int main() {

	alist[0] = { {1, 3}, {2, 10} };
	alist[1] = { {2, 1}, {3, 7} };
	alist[2] = { {0, 5}, {3, 5}, {4, 10} };
	alist[3] = { {4, 2} };

	//다익스트라 초기세팅
	int start = 0;
	for (int i = 0; i < 5; i++) {
		result[i] = 21e8;
	}
	result[start] = 0;

	q.push({ start, 0 });

	while (!q.empty()) {

		Node now = q.top();
		q.pop();

		//1. no dap 인가?
		if (result[now.witch] < now.cost) continue;


		//다음 갈곳 큐에 등록
		for (int i = 0; i < alist[now.witch].size(); i++) {
			Node next = alist[now.witch][i];

			if (now.cost + next.cost >= result[next.witch]) continue;
			result[next.witch] = now.cost + next.cost;
			q.push({ next.witch, now.cost + next.cost });
		}
	}

	return 0;
}


//------------------------------------------------------------------------------------------------------

< 다이스트라 문제 유형 >

1. 몇 개의 도시에 갈 수 있냐??
2. 

//------------------------------------------------------------------------------------------------------


//int main()
//{
//	int a, b, x, y;
//	int arr[2][4];
//
//	for (y = 0; y < 2; y++)
//	{
//		for (x = 0; x < 4; x++)
//		{
//			arr[y][x] = 0;
//		}
//	}
//}
//
//cin >> b;
//cin >> a;
//arr[b][a] = 1;
//
//for (y = 0; y < 2; y++)
//{
//	for (x = 0; x < 4; x++)
//	{
//		cout << 
//	}
//}
//
//int y, x;
//
//
//int main() {
//
//	arr[3][2];
//
//	for (y = 0; y < 3; y++)
//	{
//		for (x = 0; x < 2; x++)
//		{
//			cout <<  
//		}
//	}


----------------------------------------------------------------------------

#include <iostream>
using namesapce std;

void input;


int main()

{





return 0 ;
}




