<Union Find>


#include <iostream>
using namespace std;

int line[100];

int findboss(int tar) {
	if (line[tar] == 0) return tar;

	int ret = findboss(line[tar]);
	
	line[tar] = ret; //find 호출을 2번 할때부터 빨라짐 (경로 압축)
	
	return ret;
}

void uniongroup(int a, int b) //매개변수 목록 
{
	int t1 = findboss(a);
	int t2 = findboss(b);
	if (t1 == t2) return; //이미 같은 그룹이면 결합 x
	line[t2] = t1;
}

int main()
{

	uniongroup(3, 4);
	uniongroup(3, 5);
	uniongroup(5, 1);
	uniongroup(8, 9);

	if (findboss(3) == findboss(5))
	{
		cout << "같은 그룹"<<endl;
	}

	else
	{
		cout << "다른 그룹"<<endl;
	}

  return 0;
}


============================================


MST 알고리즘

"크루스칼 " 유니온 파인드를 사용 

준비물 : sort, union find

연결되도록 하는 





=======================================================================

#include <iostream>
using namespace std;

int main()
{
	int arr[3][3] = { {3,5,4},{1,1,2},{1,3,9}};

int by, bx;

cin >> by >> bx;

int sum = 0;


int directY[4] = { 1,-1,0,0 };
int directX[4] = { 0,0,1,-1 };

for (int t = 0; t < 4; t++)
{
	int nextY = by + directY[t];
	int nextX = bx + directX[t];

	if (nextY >= 0 && nextY < 3 && nextX >= 0 && nextX < 3)
	{
		sum += arr[nextY][nextX];
	}
}
cout << sum;

return 0;
}

==========================================================================

#include <iostream>
using namespace std;

int map[5][5] = {
	3, 3, 5, 3, 1,
	2, 2, 4, 2, 6,
	4, 9, 2, 3, 4,
	1, 1, 1, 1, 1,
	3, 3, 5, 9, 2,
};

int sum(int y, int x)
{
	int direct[4][2] = {
		-1,-1,
		-1,1,
		1,-1,
		1,1,
	};
	int dy, dx, t;

	int sum = 0;
	for (t = 0; t < 4; t++)
	{
		dy = y + direct[t][0];
		dx = x + direct[t][1];
		if (dy >= 0 && dy < 5 && dx >= 0 && dx < 5)
		{
			sum += map[dy][dx];
		}
	}
	return sum;
}

int main()
{
	int x, y;
	int max = -999;
	int maxY, maxX;

	for (y = 0; y < 4; y++)
	{
		for (x = 0; x < 4; x++)
		{
			int ret = sum(y, x);

			if (ret > max)
			{
				max = ret;
				maxY = y;
				maxX = x;
			}
		}
	}

	cout << maxY << " " << maxX;

	return 0;
}



//#include <iostream>
//using namespace std;
//
//
//int main()
//{
//
//	int N;
//	
//	cin >> N;
//
//	int arr[1000][1000];
//
//	for (int y = 0; y < N; y++)
//	{
//		for (int x = 0; x < N; x++)
//		{
//			cin >> arr[y][x];
//		}
//	}
//	return 0;
//
//
//}

//========================================================================================

//#include <iostream>
//using namespace std;
//
//int main()
//{
//	freopen("input.txt", "r", stdin);
//	int arr[3][3] = { {3,5,4},{1,1,2},{1,3,9} };
//
//	int by, bx;
//
//	cin >> by >> bx;
//
//	int sum = 0;
//
//
//	int directY[4] = { 1,-1,0,0 };
//	int directX[4] = { 0,0,1,-1 };
//
//	for (int t = 0; t < 4; t++)
//	{
//		int nextY = by + directY[t];
//		int nextX = bx + directX[t];
//
//		if (nextY >= 0 && nextY < 3 && nextX >= 0 && nextX < 3)
//		{
//			sum += arr[nextY][nextX];
//		}
//	}
//	cout << sum;
//
//	return 0;
//}

//=============================================================================================

//#include <iostream>
//using namespace std;
//
//
//int arr[5][5] =
//{
//		{3, 3, 5, 3, 1},
//		{2, 2, 4, 2, 6},
//		{4, 9, 2, 3, 4},
//		{1, 1, 1, 1, 1},
//		{3, 3, 5, 9, 2}
//};
//
//	
//int sum(int y, int x)
//{	
//		int i;
//		int sum = 0;
//		int directY[4] = { -1,-1,1,1 };
//		int directX[4] = { -1, 1,-1,1 };
//
//		for (i = 0; i < 4; i++)
//		{
//			int nextY = y + directY[i];
//			int nextX = x + directX[i];
//
//			if (nextY >= 0 && nextY < 5 && nextX >= 0 && nextX < 5)
//			{
//				sum += arr[nextY][nextX];
//			}
//
//		}
//		return sum;
//}
//
//int main()
//{
//	int x, y;
//	int max = -999;
//	int maxY, maxX;
//
//	for (y = 0; y < 4; y++)
//	{
//		for (x = 0; x < 4; x++)
//		{
//			int ret = sum(y, x);
//
//			if (ret > max)
//			{
//				max = ret;
//				maxY = y;
//				maxX = x;
//			}
//		}
//	}
//
//	cout << maxY << " " << maxX;
//
//	return 0;
//}

//=====================================================================

//#include <iostream>
//using namespace std;
//
//
//
//int main()
//{
//	char arr[4][5];
//
//	for (int y = 0; y < 4; y++)
//	{
//		for (int x = 0; x < 5; x++)
//		{
//			cin >> arr[y][x];
//		}
//	}
//
//	int by, bx;
//	int sum = 0;
//	int directY[8] = { 1,-1,1,1,0,-1,0,-1 };
//	int directX[8] = { 1,1,-1,0,1,0,-1,-1 };
//
//
//	for (int i = 0; i < 8; i++)
//	{
//		int nextY = by + directY[i];
//		int nextX = bx + directX[i];
//	
//		if (nextY >= 0 && nextY < 5 && nextX >= 0 && nextX < 4)
//		{
//			sum += arr[nextY][nextX];
//		}
//	}
//
//	cout << sum;
//
//	return 0;
//}
//
//
//

============================================================================
#include <iostream>
using namespace std;

int main()
{
	char arr[3][5] =
	{
		"ATKB",
		"CZFD",
		"HGEI"
	};
	int x, y;
	int dx, dy;
	int offsetDx, offsetDy;
	char input;

	cin >> input;
	cin >> offsetDy >> offsetDx;
	for (y = 0; y < 3; y++)
	{
		for (x = 0; x < 4; x++)
		{
			if (arr[y][x] == input)
			{
				dx = x;
				dy = y;
			}
		}
	}

	cout << arr[dy + offsetDy][dx + offsetDx];

	return 0;
}

===========================================================================
//#include<iostream>
//using namespace std;
//
//int main()
//{
//	char name[10];
//	int bucket[200] = { 0 };
//	int x;
//
//	cin >> name;
//
//	int len;
//	for (x = 0; x < 10; x++)
//	{
//		if (name[x] == '\0')
//		{
//			len = x;
//			break;
//		}
//	}
//
//	for (x = 0; x < len; x++)
//	{
//		bucket[name[x]] = 1;
//	}
//
//	for (x = 0; x < 200; x++)
//	{
//		if (bucket[x] == 1)
//		{
//			cout << (char)(x);
//		}
//	}
//}

=========================================================================
////<문자열 갯수>
//#include <iostream>
//
//#include <string>
//
//#include <map> // <---------- bst
//
//#include <unordered_map> // <--------- hash
//using namespace std;
//
//int main() {
//	unordered_map <string, int> um;
//	string vat[6] = { "huhu","hot","bts","mc","hot","hot" };
//	string a;
//	cin >> a;
//
//	int cnt = 0;
//	
//	for (int i = 0; i < 6; i++)
//	{
//		um[vat[i]]++;
//
//	}
//	if (um.count(a)==1)
//		cout << um[a] << endl;
//	return 0;
//}



//=========================================================================


