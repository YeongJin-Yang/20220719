-알고리즘 2day-

1. 디버깅
2. DAT 
3. Direct 방향 탐색
4. 재귀호출

F10 : Step Over
F11 : Step Into
Shift +F5 : 디버깅 모드 종료 

IDE (통합개발환경)

F9 : Breakpoint 토글

디버깅 
1. 호크아이
2. 로그디버깅 PRINT
3. Trace (코테에서는 사용 x, 그래도 연습은 이걸로) 변수값 빨리 도출 가능  --------- 파씽문제 사용

DAT .. 
 
 
 
배열값이 너무 크면 해쉬 사용 ( But, 이 유형 삼성 코테에서 잘 안나옴)


-----------------------------------------------------------

1.flag
2.함수	




----------------------------------------------------------
<오후>
재귀호출

1.재귀호출 무한 재귀 막기 
run 함수 -> abc 함수 -> bts( ) ..... bts() 	
		       kfc( ) ...... kfc()
               mom 함수 -> 

2. 전역변수를 쓰기 

3. 전역변수 안쓰기 


---------------------------------------------------------

#include <iostream>
using namespace std;

int x; 

void run() {
	if (x == 2) {
		return; 
	}
}
x++;
run();

int d = 1;
}
int main() {

	run();

	return 0;
}

---------------------------------------


#include <iostream>
using namespace std;

void run(int x) {
    cout << x;
    if (x == 5) {
        return;
    }

    run(x -1);
    cout << x;
}
int main()
{
    run(9);
    return 0;
}


-----------------------------------------

#include <iostream>
using namespace std;

void run(int x) {
	cout << x:	
	if (x == 5) 
	{return;
	}
	run(x - 1);
	cout << x;


}
int main() 
{
	run(9);
	return 0;


}

---------------------------------------------------------

for 문에 따라 재귀 수 결정


----------------------------------------------------------

pass 배열( 지나간 이력을 남기는것 )??

1) 빈 배열을 만듭니다
2) for 타서 재귀 타기 직전에(run 함수 직전에) pass 배열 

--------------------------------------------------------------
-삼성전자 다중 출제
Back tracking (DFS)

-브루트 포스(완탕)
for  개수가 정해질 때
재귀 개수가 n개
백 트래킹



