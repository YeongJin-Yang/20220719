플러드필...(DFS와 유사)

1.처리

2.예약 걸수 있는 것 등록 
----------------------------------------------------------------------------------------------
<문제 1.> 


#include <iostream>
#include <string>
#include <vector>
#include <queue>
using namespace std;

struct Node {
	int y,x;
	int lev;
};

int room[5][5];
int directY[4] = { -1,1,0,0 };
int directX[4] = { 0,0,-1,1 };
queue<Node> q;
	

int main()
{
room[2][2] = 1; //피
q.push({ 2,2,0 });

int lastlev = 0;

//Flood fill 시작

while (!q.empty()) {
			
// 1. 하나 빼기 (갔던 길 안가도록 하기 위해서)
Node now = q.front();   // 큐 읽기 : 맨 앞만 읽기 
q.pop();                // 큐 삭제 : 맨 앞만 삭제 

//2. 다음 갈 수 있는 길 등록
for (int i = 0; i < 4; i++) {
int ny = now.y + directY[i];
int nx = now.x + directX[i];
if (ny < 0 || nx < 0 || ny >= 5 || nx >= 5) continue; 
if (room[ny][nx] == 1) continue;  //1이면 탈락 

room[ny][nx] = 1;
q.push({ ny,nx, now.lev + 1 });

lastlev = now.lev + 1;
}

int v = 10;
}

cout << lastlev << endl;
return 0;

#include <iostream>
#include <string>
#include <vector>
#include <queue>
using namespace std;

struct Node {
	int y,x;
	int lev;
};

int room[5][5];
int directY[4] = { -1,1,0,0 };
int directX[4] = { 0,0,-1,1 };
queue<Node> q;
	

int main()
{
	room[2][2] = 1; //피
	q.push({ 2,2,0 });

	int lastlev = 0;

	//Flood fill 시작

	while (!q.empty()) {
			
		// 1. 하나 빼기 (갔던 길 안가도록 하기 위해서)
		Node now = q.front();   // 큐 읽기 : 맨 앞만 읽기 
		q.pop();                // 큐 삭제 : 맨 앞만 삭제 

		//2. 다음 갈 수 있는 길 등록
		for (int i = 0; i < 4; i++) {
			int ny = now.y + directY[i];
			int nx = now.x + directX[i];
			if (ny < 0 || nx < 0 || ny >= 5 || nx >= 5) continue; 
			if (room[ny][nx] == 1) continue;  //1이면 탈락 

			room[ny][nx] = 1;
			q.push({ ny,nx, now.lev + 1 });

			lastlev = now.lev + 1;
		}

		int v = 10;
	}

	cout << lastlev << endl;
	return 0;
}
}

------------------------------------------------------------------------------------------------

true = 1 
false = 0 

--------------------------------------------------------------------------------------------
<문제 2.>

#include <iostream>
#include <queue>
using namespace std;

struct Node {
    int y, x;
};

int map[3][4] = { 0 };

queue<Node> q;
int directY[4] = { -1, 1, 0, 0 };
int directX[4] = { 0, 0, -1, 1 };

int main()
{
    //초기세팅                                            <------ 만약에 씨앗을 2개 설정하고 싶으면 
    map[1][1] = 1;                             
    q.push({ 1, 1 });
                                                                       여기에 map[ ][ ]  = ;
						        q.push({ });
	
                                   				1개 더 추가하면 됩니다.

    //Flood Fill
    while (!q.empty()) {
        Node now = q.front();
        q.pop();

        for (int t = 0; t < 4; t++) {

            int ny = now.y + directY[t];
            int nx = now.x + directX[t];
            if (ny < 0 || nx < 0 || ny >= 3 || nx >= 4) continue;

            if (map[ny][nx] != 0)continue;
            map[ny][nx] = map[now.y][now.x] + 1;
            q.push({ ny, nx });
        }
    }

    for (int y = 0; y < 3; y++) {
        for (int x = 0; x < 4; x++) {
            cout << map[y][x];
        }
        cout << endl;
    }

-------------------------------------------------------------------------------------------------
<문제 3.>

/*#include <iostream>
#include <queue>
using namespace std;

int map[5][7] = {
	1,1,1,1,1,1,1,
	0,0,0,0,0,0,1,
	1,1,0,1,0,1,1,
	1,0,0,0,0,0,1,
	1,1,1,1,0,1,1
}; //0, 0을 포함한 섬의 크기는? = 13

struct Node {
	int y, x;
};

queue<Node> q;
int used[5][7];
int directY[4] = { -1, 1, 0, 0 };
int directX[4] = { 0, 0, -1, 1 };

int main()
{
	int cnt = 1;
	q.push({ 0, 0 });
	used[0][0] = 1;

	while (!q.empty()) {
		Node now = q.front();
		q.pop();

		for (int t = 0; t < 4; t++) {
			int ny = now.y + directY[t];
			int nx = now.x + directX[t];
			if (ny < 0 || nx < 0 || ny >= 5 || nx >= 7) continue;
			if (map[ny][nx] == 0) continue;
			if (used[ny][nx] == 1) continue;
			used[ny][nx] = 1;
			q.push({ ny, nx });
			cnt++;
		}

	}

	cout << cnt;

	return 0;
}

	*/


---------------------------------------------------------------------------------------------
<알고리즘탑 1>

#include <iostream>

#include <string>

#include <queue>

#include<vector>
using namespace std;

struct Node {
    int y, x;
    int lev;
};

int room[100][100];
int directy[4] = { -1,1,0,0 };
int directx[4] = { 0,0,-1,1 };
queue<Node> q;
int main()
{
    int a, b;
    int c, d, e, f;
    int lastLev = 0;
    cin >> a >> b;
    cin >> c >> d;
    cin >> e >> f;

for (int i = 0; i < a; i++)
{
    for (int j = 0; j < b; j++)
    {
        room[i][i] = 0;
    }
}
room[c][d] = 1;
q.push({ c,d ,0});
room[e][f] = 1;
q.push({ e,f,0 });

while (!q.empty())
{
    Node now = q.front();
    q.pop();
    for (int y = 0; y < 4; y++)
    {
        int ny = now.y + directy[y];
        int nx = now.x + directx[y];
        if (ny < 0 || nx < 0 || ny >= a || nx >= b) continue;
        if (room[ny][nx] == 1) continue;
        room[ny][nx]= 1;
        q.push({ ny,nx ,now.lev + 1 });
        lastLev = now.lev + 1;
    }
}
cout << lastLev+1 << endl;

return 0;
}


-----------------------------------------------------------------	----------------

#include <iostream>






